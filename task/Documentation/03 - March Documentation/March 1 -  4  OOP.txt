9:00 am


//===========JAVASCRIPT OOP============//
->practice no parameters

->Encapsulation
f() -> methods
x -> property

object: function()
{ return $this.}

->Abstraction
simpler interface
Reduce the impact of change

->Inheritance
Eliminate redundant code

->polymorphism
many and form

benefits of OOP
//Encapsulation = reduce complexity + reusability
//Abstraction = Reduce complexity + isolate impact of changes
//inheritance = eliminate redundant code
//Polymorphism = refactior ugly switch/case statements 




OOP -> Objects
fundamental of objects

//object literals
collection of key value pairs
example:
const circle =  {
    radius: 1,
    location: {
        x: 1,
        y: 1,
    },
    draw: function()
    {
        console.log(return );
    }
};

circle.draw();

better way of creating in function
function createCircle(radius)
{
    return {
        radius,
        draw: function() {
            console.log('draw');
        }
    };
}

this<- reference object
//factory function
const circle = createCircle(1);

//Constructor Function
//firstletter shoud uppecase
function Circle(radius) {
   this.radius = radius,
   this.draw = function() {
      console.log('draw');
   }
}

const another = new Circle(1); //{}

-Object, Property, and Method
-Class
-Encapsulation
-Abstraction
-Reusability or Inheritance
-Polymorphism
-Association
-Aggregation
-Composition
========================================
== Object, Property, and Method ==
-object literal
	let, const person = {
		name: "taragis",
		age: 22,
	}; *Syntax of creating object
//when creating object make sure the name should be meaningful
  **Object Constructor**

	function Book(title, author, year) { 
  		 this.title = title; 
  		 this.author = author; 
  	 this.year = year;
	}

//declaring object to reuse object literal
	const book1 = new Book ('Hippie', 'Paulo Coelho', '2018');
//changing the name of the object makes them different even if they have the same properties 
==========================================
============= CLASS ==================
-blueprint of an object
class Book {
   constructor(name) {
      this.name = name
   }
}
class newBook extends Book { 
   constructor(name) {
      super(name);
   }
}
const book1 = new newBook("The Alchemist");
//inherits the content of class Book by using extends
=======================================================
============= Encapsulation ================
Encapsulation means hiding information or data. It refers to the ability of the object to execute its functionality without revealing any execution details to the caller. In other words, the private variable is only visible to the current function and is not accessible to the global scope or other functions.

const Book = function(t, a) {
   let title = t; 
   let author = a; 
   
   return {
      summary : function() { 
        console.log(`${title} written by ${author}.`);
      } 
   }
}
const book1 = new Book('Hippie', 'Paulo Coelho');
book1.summary();
> Hippie written by Paulo Coelho.
In the above code the title and the author are only visible inside the scope of the function Book and the method summary is visible to the caller of Book. So the title and the author are encapsulated inside Book.
=======================================================
============= ==traction ================	
hiding implementation details and showing only whats necessary
//Accessing the private method in oop
const Book = function(getTitle, getAuthor) { 
   // Private variables / properties  
   let title = getTitle; 
   let author = getAuthor;
// Public method 
   this.giveTitle = function() {
      return title;
   }
   
   // Private method
   const summary = function() {
      return `${title} written by ${author}.`
   }
// Public method that has access to private method.
   this.giveSummary = function() {
      return summary()
   } 
}
const book1 = new Book('Hippie', 'Paulo Coelho');
book1.giveTitle();
> "Hippie"
book1.summary();
> Uncaught TypeError: book1.summary is not a function
book1.giveSummary();
> "Hippie written by Paulo Coelho."
=======================================================


